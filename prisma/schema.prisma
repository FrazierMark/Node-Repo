// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]

  profile     Profile?
  folders     Folder[]
  files       File[]
  fileWorkspaces FileWorkspace[]
  workspace   Workspace[]

  FileItem FileItem[]

  Preset Preset[]

  PresetWorkspace PresetWorkspace[]

  Assistant Assistant[]

  AssistantWorkspace AssistantWorkspace[]

  Chat Chat[]

  ChatFile ChatFile[]

  Message Message[]

  MessageFileItem MessageFileItem[]

  PromptWorkspace PromptWorkspace[]

  Prompt Prompt[]

  Collection Collection[]

  CollectionWorkspace CollectionWorkspace[]

  CollectionFile CollectionFile[]

  AssistantFile AssistantFile[]

  AssistantCollection AssistantCollection[]

  Tool Tool[]

  ToolWorkspace ToolWorkspace[]

  AssistantTool AssistantTool[]
}

model Profile {
  id                     String  @id @default(cuid())
  userId                 String  @unique
  user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  bio                    String
  hasOnboarded           Boolean @default(false)
  imageUrl               String
  imagePath              String
  profileContext         String
  displayName            String
  useAzureOpenai         Boolean
  username               String  @unique
  anthropicApiKey        String?
  azureOpenai35TurboId   String?
  azureOpenai45TurboId   String?
  azureOpenai45VisionId  String?
  azureOpenaiApiKey      String?
  azureOpenaiEmbeddingsId String?
  azureOpenaiEndpoint    String?
  googleGeminiApiKey     String?
  groqApiKey             String?
  mistralApiKey          String?
  openaiApiKey           String?
  openaiOrganizationId   String?
  openrouterApiKey       String?
  perplexityApiKey       String?

  @@index([userId])
}

model Workspace {
  id                            String   @id @default(cuid())
  userId                        String
  user                          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  sharing                       String   @default("private")
  defaultContextLength          Int
  defaultModel                  String
  defaultPrompt                 String
  defaultTemperature            Float
  description                   String
  embeddingsProvider            String
  includeProfileContext         Boolean
  includeWorkspaceInstructions  Boolean
  instructions                  String
  imagePath                     String   @default("")
  isHome                        Boolean  @default(false)
  name                          String
  folders                       Folder[]
  fileWorkspaces                FileWorkspace[]

  @@index([userId])
  @@unique([userId, isHome], name: "unique_home_workspace_per_user")
  PresetWorkspace PresetWorkspace[]
  AssistantWorkspace AssistantWorkspace[]
  Chat Chat[]
  PromptWorkspace PromptWorkspace[]
  CollectionWorkspace CollectionWorkspace[]
  ToolWorkspace ToolWorkspace[]
}

model Folder {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  type        String

  files       File[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
  Preset Preset[]
  Assistant Assistant[]
  Chat Chat[]
  Prompt Prompt[]
  Collection Collection[]
  Tool Tool[]
}

model File {
  id          String   @id @default(cuid())
  userId      String
  folderId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sharing     String   @default("private")
  description String
  filePath    String
  name        String
  size        Int
  tokens      Int
  type        String

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder          Folder?         @relation(fields: [folderId], references: [id], onDelete: SetNull)
  fileWorkspaces  FileWorkspace[]

  @@index([userId])
  @@index([folderId])
  FileItem FileItem[]
  ChatFile ChatFile[]
  CollectionFile CollectionFile[]
  AssistantFile AssistantFile[]
}

model FileWorkspace {
  userId      String
  fileId      String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  file      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([fileId, workspaceId])
  @@index([userId])
  @@index([fileId])
  @@index([workspaceId])
}

model FileItem {
  id             String   @id @default(cuid())
  fileId         String 
  userId         String 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sharing        String   @default("private")
  content        String
  localEmbedding String?
  openaiEmbedding String?
  tokens         Int

  file           File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([fileId])
  @@index([userId])
  MessageFileItem MessageFileItem[]
}

model Preset {
  id                           String   @id @default(cuid())
  userId                       String 
  folderId                     String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  sharing                      String   @default("private")
  contextLength                Int
  description                  String
  embeddingsProvider           String
  includeProfileContext        Boolean 
  includeWorkspaceInstructions Boolean
  model                        String
  name                         String
  prompt                       String
  temperature                  Float

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([userId])
  PresetWorkspace PresetWorkspace[]
}

model PresetWorkspace {
  userId      String
  presetId    String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  preset    Preset    @relation(fields: [presetId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([presetId, workspaceId])
  @@index([userId])
  @@index([presetId])
  @@index([workspaceId])
}

model Assistant {
  id                          String   @id @default(cuid())
  userId                      String
  folderId                    String?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  sharing                     String   @default("private")
  contextLength               Int
  description                 String
  embeddingsProvider          String
  includeProfileContext       Boolean
  includeWorkspaceInstructions Boolean
  model                       String
  name                        String
  imagePath                   String
  prompt                      String
  temperature                 Float

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([userId])
  AssistantWorkspace AssistantWorkspace[]
  Chat Chat[]
  AssistantFile AssistantFile[]
  AssistantCollection AssistantCollection[]
  AssistantTool AssistantTool[]
  Message Message[]
}

model AssistantWorkspace {
  userId      String
  assistantId String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([assistantId, workspaceId])
  @@index([userId])
  @@index([assistantId])
  @@index([workspaceId])
}

model Chat {
  id                          String   @id @default(cuid())
  userId                      String
  workspaceId                 String
  assistantId                 String?
  folderId                    String?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  sharing                     String   @default("private")
  contextLength               Int
  embeddingsProvider          String
  includeProfileContext       Boolean
  includeWorkspaceInstructions Boolean
  model                       String
  name                        String
  prompt                      String
  temperature                 Float

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace  Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assistant  Assistant? @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  folder     Folder?    @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([workspaceId])
  ChatFile ChatFile[]
  Message Message[]
}

model ChatFile {
  userId    String
  chatId    String
  fileId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat  Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  file  File  @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([chatId, fileId])
  @@index([chatId])
}

model Message {
  id                 String   @id @default(cuid())
  assistantId        String?
  chatId             String
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  content            String
  imagePaths         MessageImagePath[]
  model              String
  role               String
  sequenceNumber     Int


  chat      Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant Assistant? @relation(fields: [assistantId], references: [id], onDelete: Cascade)


  @@index([chatId])
  MessageFileItem MessageFileItem[]
}

model MessageImagePath {
  id        String   @id @default(cuid())
  messageId String
  path      String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model MessageFileItem {
  userId      String
  messageId   String
  fileItemId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  message    Message    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  fileItem   FileItem   @relation(fields: [fileItemId], references: [id], onDelete: Cascade)

  @@id([messageId, fileItemId])
  @@index([messageId])
}

model Prompt {
  id        String   @id @default(cuid())
  userId    String
  folderId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sharing   String   @default("private")
  content   String
  name      String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  promptWorkspaces PromptWorkspace[]

  @@index([userId])
}

model PromptWorkspace {
  userId      String
  promptId    String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt    @relation(fields: [promptId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([promptId, workspaceId])
  @@index([userId])
  @@index([promptId])
  @@index([workspaceId])
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  folderId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sharing     String   @default("private")
  description String
  name        String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([userId])
  CollectionWorkspace CollectionWorkspace[]
  CollectionFile CollectionFile[]
  AssistantCollection AssistantCollection[]
}

model CollectionWorkspace {
  userId        String
  collectionId  String
  workspaceId   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Composite primary key
  @@id([collectionId, workspaceId])

  // Relationships
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  workspace    Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([collectionId])
  @@index([workspaceId])
}

model CollectionFile {
  userId        String
  collectionId  String
  fileId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Composite primary key
  @@id([collectionId, fileId])

  // Relationships
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  file         File       @relation(fields: [fileId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([collectionId])
  @@index([fileId])
}

model AssistantFile {
  userId       String   
  assistantId  String
  fileId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Composite primary key
  @@id([assistantId, fileId])

  // Relationships
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant   Assistant  @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  file        File       @relation(fields: [fileId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([assistantId])
  @@index([fileId])
}

model AssistantCollection {
  userId        String
  assistantId   String
  collectionId  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Composite primary key
  @@id([assistantId, collectionId])

  // Relationships
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant    Assistant  @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([assistantId])
  @@index([collectionId])
}

model Tool {
  id          String   @id @default(uuid())
  userId      String
  folderId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sharing     String   @default("private")
  customHeaders String
  description String
  name        String
  schema      String
  url         String

  // Relationships
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder  Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([userId])
  ToolWorkspace ToolWorkspace[]
  AssistantTool AssistantTool[]
}

model ToolWorkspace {
  userId      String
  toolId      String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Composite primary key
  @@id([toolId, workspaceId])

  // Relationships
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool       Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)
  workspace  Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([toolId])
  @@index([workspaceId])
}

model AssistantTool {
  userId      String
  assistantId String
  toolId      String
  createdAt   DateTime @default(now())

  // Composite primary key
  @@id([assistantId, toolId])

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  tool      Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([assistantId])
  @@index([toolId])
}


model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
